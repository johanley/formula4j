/* Generated By:JavaCC: Do not edit this line. MathematicalExpression.java */
  package hirondelle.formula.eval;

  import java.io.*;
  import java.util.*;
  import hirondelle.formula.function.Function;
  import hirondelle.formula.Decimal;
  import hirondelle.formula.UnpopulatedVariableException;
  import hirondelle.formula.UnknownFunctionException;
  import java.math.BigDecimal;


  public final class MathematicalExpression implements MathematicalExpressionConstants {

    public MathematicalExpression(String aText){
      this(new BufferedReader(new StringReader(aText)));
    }

    public void setVariables(Map<String, Decimal> aVariables){
      fVariables = aVariables;
    }

    public void setFunctions(Map<String, Function> aFunctions){
      fFunctions = aFunctions;
    }

    // PRIVATE

    private Map<String, Decimal> fVariables = new LinkedHashMap<String, Decimal>();
    private Map<String, Function> fFunctions = new LinkedHashMap<String, Function>();

    private void log(String aMsg){
       System.out.println(aMsg);
    }

    private Decimal num(String aToken){
      return new Decimal(new BigDecimal(aToken));
    }

    private Decimal constant(String aToken){
      Decimal result = null;
      if ("e".equalsIgnoreCase(aToken)){
        result = Decimal.E;
      }
      else if ("\u03c0".equalsIgnoreCase(aToken) ||  "pi".equalsIgnoreCase(aToken)){
        result = Decimal.PI;
      }
      return result;
    }

    private Decimal variable(String aToken) {
      Decimal result = fVariables.get(aToken);
      //this is a defensive block only; the Formula class already 
      //checks for unpopulated items at a higher level in the call stack
      if (result == null) {
        throw new UnpopulatedVariableException(aToken);
      }
      return result;
    }

    /** 
     Not the best: coerces the power to an integer.
     Instead, this should be defined as syntax, not in code.
    */
    private Decimal pow(Decimal aBase, Decimal aPower){
      return aBase.pow(aPower);
    }

    /** The remainder after division. */
    private Decimal modulus(Decimal a, Decimal b){
      return Decimal.from(a.intValue() % b.intValue());
    }

// SYNTAX :
  final public Decimal Start() throws ParseException {
  Decimal result = Decimal.ZERO;
    result = Expression();
    jj_consume_token(0);
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal Expression() throws ParseException {
  Decimal result = Decimal.ZERO;
    result = AdditiveExpression();
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal AdditiveExpression() throws ParseException {
  Decimal result = Decimal.ZERO;
  Decimal a = Decimal.ZERO;
  Decimal b = Decimal.ZERO;
    a = MultiplicativeExpression();
   result = a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = MultiplicativeExpression();
     result = result.plus(b);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = MultiplicativeExpression();
     result = result.minus(b);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal MultiplicativeExpression() throws ParseException {
  Decimal result = Decimal.ZERO;
  Decimal a = Decimal.ZERO;
  Decimal b = Decimal.ZERO;
    a = UnaryExpression();
   result = a;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        b = UnaryExpression();
     result = result.times(b);
        break;
      case DIV:
        jj_consume_token(DIV);
        b = UnaryExpression();
     result = result.div(b);
        break;
      case MOD:
        jj_consume_token(MOD);
        b = UnaryExpression();
     result = modulus(a,b);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal UnaryExpression() throws ParseException {
  Decimal result = Decimal.ZERO;
  Decimal plus = Decimal.ZERO;
  Decimal minus = Decimal.ZERO;
  Decimal power = Decimal.ZERO;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      plus = UnaryExpression();
   result = plus;
      break;
    case MINUS:
      jj_consume_token(MINUS);
      minus = UnaryExpression();
   result = minus.times(Decimal.MINUS_ONE);
      break;
    case NUMBER:
    case CONSTANT:
    case FUNCTION:
    case VARIABLE:
    case LRND:
      power = PowerExpression();
         result = power;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal PowerExpression() throws ParseException {
  Decimal result = Decimal.ZERO;
  Decimal base = Decimal.ZERO;
  Decimal power = Decimal.ZERO;
    base = UnaryExpressionNotPlusMinus();
   result = base;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
      power = UnaryExpression();
     result = pow(base, power);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Decimal UnaryExpressionNotPlusMinus() throws ParseException {
  Decimal result = Decimal.ZERO;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
           result = num(token.image);
      break;
    case CONSTANT:
      jj_consume_token(CONSTANT);
           result = constant(token.image);
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
            result = variable(token.image);
      break;
    case FUNCTION:
      result = Function();
      break;
    case LRND:
      jj_consume_token(LRND);
      result = Expression();
      jj_consume_token(RRND);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

//The open paren is buried in the FUNCTION token; note that it's chopped off here
  final public Decimal Function() throws ParseException {
  String name = "";
  List<Decimal> args;
  Decimal result = Decimal.ZERO;
    jj_consume_token(FUNCTION);
    name = token.image.substring(0,token.image.length()-1);
    args = ArgumentList();
    jj_consume_token(RRND);
     Function function = fFunctions.get(name);
     //this is defensive only; Formula will have already checked for this
     if (function == null){
       {if (true) throw new UnknownFunctionException(name);}
     }
     result = function.calculate(args.toArray(new Decimal[0]));
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List<Decimal> ArgumentList() throws ParseException {
  List<Decimal> result = new ArrayList<Decimal>();
  Decimal expr = Decimal.ZERO;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case CONSTANT:
    case FUNCTION:
    case VARIABLE:
    case LRND:
    case PLUS:
    case MINUS:
      expr = Expression();
      result.add(expr);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        expr = Expression();
      result.add(expr);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MathematicalExpressionTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x30000,0x30000,0x2c0000,0x2c0000,0x32644,0x100000,0x2644,0x8000,0x32644,};
   }

  /** Constructor with InputStream. */
  public MathematicalExpression(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MathematicalExpression(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MathematicalExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MathematicalExpression(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MathematicalExpressionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MathematicalExpression(MathematicalExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MathematicalExpressionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  }
